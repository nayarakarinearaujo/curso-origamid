"use strict";
//* Null - Undefined
var _a, _b;
//? null => significa aus√™ncia de valor intencional.
//? undefined => significa que a vari√°vel foi declarada, mas n√£o tem valor atribu√≠do.
// Exemplo pr√°tico:
// Tenta selecionar um bot√£o no HTML
const button1 = document.querySelector("button");
// Busca uma informa√ß√£o no localStorage
const config = localStorage.getItem("config");
//* Verifica se o bot√£o existe antes de executar o m√©todo .click()
// O ?. √© chamado de operador de encadeamento opcional (optional chaining)
// ‚úÖ Funciona como uma prote√ß√£o para evitar erro de:
// "Cannot read properties of null" ou "undefined"
button1 === null || button1 === void 0 ? void 0 : button1.click();
// Criando um objeto SEM a propriedade 'nome'
const livro = {};
// Criando um objeto COM a propriedade 'nome'
const jogo = {
    nome: "Ragnarok",
};
// üîç Aqui √© usado o operador ?. (encadeamento opcional) para verificar:
// Se 'nome' existir, executa .toLowerCase() (transforma em min√∫sculo)
// Se 'nome' n√£o existir, retorna undefined sem dar erro
console.log((_a = jogo.nome) === null || _a === void 0 ? void 0 : _a.toLowerCase());
// Sa√≠da: "ragnarok" (porque o nome existe)
console.log((_b = livro.nome) === null || _b === void 0 ? void 0 : _b.toLowerCase());
// Sa√≠da: undefined (porque o nome n√£o existe no objeto livro)
// Sem erro! Se n√£o usar o ?. daria erro ao tentar executar .toLowerCase() em undefined
