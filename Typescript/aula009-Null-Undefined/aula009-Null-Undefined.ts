//* Null - Undefined

//? null => significa aus√™ncia de valor intencional.
//? undefined => significa que a vari√°vel foi declarada, mas n√£o tem valor atribu√≠do.

// Exemplo pr√°tico:

// Tenta selecionar um bot√£o no HTML
const button1 = document.querySelector("button");

// Busca uma informa√ß√£o no localStorage
const config = localStorage.getItem("config");

//* Verifica se o bot√£o existe antes de executar o m√©todo .click()
// O ?. √© chamado de operador de encadeamento opcional (optional chaining)

// ‚úÖ Funciona como uma prote√ß√£o para evitar erro de:
// "Cannot read properties of null" ou "undefined"
button1?.click();

//* Propriedades Opcionais

// ‚úÖ Podemos definir propriedades opcionais nas interfaces usando o s√≠mbolo ? ap√≥s o nome da propriedade.
// Exemplo: nome?: string
// Isso significa que a propriedade pode existir ou n√£o.
// Se n√£o existir, o valor dela ser√° undefined.

// Definindo a interface com a propriedade opcional 'nome'
interface Products {
  nome?: string; // <- pode ser uma string OU undefined
}

// Criando um objeto SEM a propriedade 'nome'
const livro: Products = {};

// Criando um objeto COM a propriedade 'nome'
const jogo: Products = {
  nome: "Ragnarok",
};

// üîç Aqui √© usado o operador ?. (encadeamento opcional) para verificar:
// Se 'nome' existir, executa .toLowerCase() (transforma em min√∫sculo)
// Se 'nome' n√£o existir, retorna undefined sem dar erro
console.log(jogo.nome?.toLowerCase()); 
// Sa√≠da: "ragnarok" (porque o nome existe)

console.log(livro.nome?.toLowerCase()); 
// Sa√≠da: undefined (porque o nome n√£o existe no objeto livro)
// Sem erro! Se n√£o usar o ?. daria erro ao tentar executar .toLowerCase() em undefined
