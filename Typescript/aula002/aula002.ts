//? ‚úÖ Com TypeScript, podemos indicar o tipo de dado de uma vari√°vel usando anota√ß√µes (: string, : number, etc)

const produto: string = "Livro";
const preco: number = 200;

console.log(produto);

const barato = preco < 400 ? true : "Produto Caro";
console.log(barato);

//? ‚úÖ Tamb√©m podemos definir o tipo dos dados dentro de um objeto

const carro: {
  marca: string;
  portas: number;
} = {
  marca: "Audi",
  portas: 5,
};

console.log(carro.marca);

//! ‚úÖ Nem sempre √© necess√°rio declarar o tipo explicitamente.
// O TypeScript consegue inferir (deduzir) o tipo com base no valor atribu√≠do.

//! ‚úÖ No entanto, as anota√ß√µes de tipo s√£o muito √∫teis (e recomendadas) ao trabalhar com fun√ß√µes,
// pois ajudam a garantir que os par√¢metros e o retorno estejam corretos.

// üí° Exemplo de fun√ß√£o com anota√ß√µes de tipo:

//? ‚úÖ Fun√ß√£o com tipos definidos para os par√¢metros e para o retorno
function somar(a: number, b: number): number {
  return a + b;
}

console.log(somar(25, 6));

//? ‚úÖ Objeto com valores do tipo string
const nintendo = {
  nome: "Nintendo",
  preco: "2000",
};

//? ‚úÖ Fun√ß√£o que recebe um objeto com propriedades nome e preco (ambos do tipo string),
//? transforma o preco e retorna o objeto atualizado
function transformarPreco(produto: { nome: string; preco: string }): {
  nome: string;
  preco: string;
} {
  produto.preco = "R$ " + produto.preco;
  return produto;
}

const produtoNovo = transformarPreco(nintendo);
console.log(produtoNovo);
