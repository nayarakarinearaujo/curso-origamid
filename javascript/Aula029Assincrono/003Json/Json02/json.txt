/*
ðŸ“˜ JSON.parse() e JSON.stringify()

- JSON.parse() transforma um **texto JSON** em um **objeto JavaScript**.
  Exemplo: JSON recebido de um arquivo ou de uma API.

- JSON.stringify() transforma um **objeto JavaScript** em uma **string JSON**.
  Exemplo: para salvar dados no localStorage ou enviar para um servidor.
*/

//* Exemplo de JSON.parse()
fetch("../Json/dados.json") // Faz a requisiÃ§Ã£o do arquivo JSON
  .then((response) => response.text()) // Converte a resposta para texto
  .then((jsonText) => {
    // DesserializaÃ§Ã£o: converte o texto JSON em objeto JavaScript
    const jsonFinal = JSON.parse(jsonText);
    console.log(jsonFinal); // Mostra o objeto no console
  });


//* Exemplo de JSON.stringify()
const aula = {
  id: 1,
  aula: "HTML",
  tempo: "30min",
};

// SerializaÃ§Ã£o: converte o objeto JavaScript para uma string no formato JSON
const stringConfig = JSON.stringify(aula);
console.log(stringConfig); // Exibe a string JSON

//------------------------------------------

/*
ðŸ“Œ NOME TÃ‰CNICO:
- SerializaÃ§Ã£o: transformar um objeto JavaScript em uma string JSON
*/

// Armazena a string JSON no localStorage com a chave "config"
localStorage.config = JSON.stringify(aula);


/*
ðŸ“Œ NOME TÃ‰CNICO:
- DesserializaÃ§Ã£o: transformar uma string JSON em um objeto JavaScript
*/

// Recupera o conteÃºdo do localStorage (em texto) e converte de volta para objeto
console.log(JSON.parse(localStorage.config));

/*
ðŸ’¡ RESUMO:
- JSON.stringify(obj): transforma objeto em string JSON
- JSON.parse(json): transforma string JSON em objeto
- localStorage: armazena apenas strings â†’ por isso usamos stringify/parse

âœ… Usado para:
- Salvar e recuperar dados com localStorage
- Comunicar com APIs que trocam dados em JSON
- PersistÃªncia de estado em aplicaÃ§Ãµes web (como salvar configuraÃ§Ãµes do usuÃ¡rio)
*/
